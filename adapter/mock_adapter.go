// Code generated by MockGen. DO NOT EDIT.
// Source: adapter.go

// Package mock_adapter is a generated GoMock package.
package adapter

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBusAdapter is a mock of BusAdapter interface.
type MockBusAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockBusAdapterMockRecorder
}

// MockBusAdapterMockRecorder is the mock recorder for MockBusAdapter.
type MockBusAdapterMockRecorder struct {
	mock *MockBusAdapter
}

// NewMockBusAdapter creates a new mock instance.
func NewMockBusAdapter(ctrl *gomock.Controller) *MockBusAdapter {
	mock := &MockBusAdapter{ctrl: ctrl}
	mock.recorder = &MockBusAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBusAdapter) EXPECT() *MockBusAdapterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockBusAdapter) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockBusAdapterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBusAdapter)(nil).Close))
}

// Read mocks base method.
func (m *MockBusAdapter) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockBusAdapterMockRecorder) Read(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockBusAdapter)(nil).Read), p)
}

// Write mocks base method.
func (m *MockBusAdapter) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockBusAdapterMockRecorder) Write(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockBusAdapter)(nil).Write), p)
}
